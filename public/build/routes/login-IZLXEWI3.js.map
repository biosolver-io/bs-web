{
  "version": 3,
  "sources": ["../../../app/routes/login.tsx"],
  "sourcesContent": ["import type { ActionArgs, LoaderArgs, V2_MetaFunction } from \"@remix-run/node\";\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, Link, useActionData, useSearchParams } from \"@remix-run/react\";\nimport { useEffect, useRef } from \"react\";\nimport logoPng from '~/assets/images/logos/base.png';\nimport { FaGoogle, FaLinkedin } from 'react-icons/fa';\n\nimport { verifyLogin } from \"~/models/user.server\";\nimport { createUserSession, getUserId } from \"~/session.server\";\nimport { safeRedirect, validateEmail } from \"~/utils\";\n\nexport const loader = async ({ request }: LoaderArgs) => {\n  const userId = await getUserId(request);\n  if (userId) return redirect(\"/\");\n  return json({});\n};\n\nexport const action = async ({ request }: ActionArgs) => {\n  const formData = await request.formData();\n  const email = formData.get(\"email\");\n  const password = formData.get(\"password\");\n  const redirectTo = safeRedirect(formData.get(\"redirectTo\"), \"/\");\n  const remember = formData.get(\"remember\");\n\n  if (!validateEmail(email)) {\n    return json(\n      { errors: { email: \"Email is invalid\", password: null } },\n      { status: 400 }\n    );\n  }\n\n  if (typeof password !== \"string\" || password.length === 0) {\n    return json(\n      { errors: { email: null, password: \"Password is required\" } },\n      { status: 400 }\n    );\n  }\n\n  if (password.length < 8) {\n    return json(\n      { errors: { email: null, password: \"Password is too short\" } },\n      { status: 400 }\n    );\n  }\n\n  const user = await verifyLogin(email, password);\n\n  if (!user) {\n    return json(\n      { errors: { email: \"Invalid email or password\", password: null } },\n      { status: 400 }\n    );\n  }\n\n  return createUserSession({\n    redirectTo,\n    remember: remember === \"on\" ? true : false,\n    request,\n    userId: user.id,\n  });\n};\n\nexport const meta: V2_MetaFunction = () => [{ title: \"Login\" }];\n\nexport default function LoginPage() {\n  const [searchParams] = useSearchParams();\n  const redirectTo = searchParams.get(\"redirectTo\") || \"/notes\";\n  const actionData = useActionData<typeof action>();\n  const emailRef = useRef<HTMLInputElement>(null);\n  const passwordRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    if (actionData?.errors?.email) {\n      emailRef.current?.focus();\n    } else if (actionData?.errors?.password) {\n      passwordRef.current?.focus();\n    }\n  }, [actionData]);\n\n  return (\n    <>\n      <div className=\"flex min-h-full flex-col justify-center\">\n        <div className=\"mx-auto w-full max-w-md px-8\">\n          <Link to=\"/\" className=\"items-center\" >\n            <img className=\"h-16 w-16 mx-auto\" src={logoPng} alt=\"BioSolver Logo\" />\n          </Link>\n          <Form method=\"post\" className=\"space-y-6\">\n            <div>\n              <label\n                htmlFor=\"email\"\n                className=\"block text-sm font-medium text-gray-700\"\n              >\n                Email address\n              </label>\n              <div className=\"mt-1\">\n                <input\n                  ref={emailRef}\n                  id=\"email\"\n                  required\n                  autoFocus={true}\n                  name=\"email\"\n                  type=\"email\"\n                  autoComplete=\"email\"\n                  aria-invalid={actionData?.errors?.email ? true : undefined}\n                  aria-describedby=\"email-error\"\n                  className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg\"\n                />\n                {actionData?.errors?.email ? (\n                  <div className=\"pt-1 text-red-700\" id=\"email-error\">\n                    {actionData.errors.email}\n                  </div>\n                ) : null}\n              </div>\n            </div>\n\n            <div>\n              <label\n                htmlFor=\"password\"\n                className=\"block text-sm font-medium text-gray-700\"\n              >\n                Password\n              </label>\n              <div className=\"mt-1\">\n                <input\n                  id=\"password\"\n                  ref={passwordRef}\n                  name=\"password\"\n                  type=\"password\"\n                  autoComplete=\"current-password\"\n                  aria-invalid={actionData?.errors?.password ? true : undefined}\n                  aria-describedby=\"password-error\"\n                  className=\"w-full rounded border border-gray-500 px-2 py-1 text-lg\"\n                />\n                {actionData?.errors?.password ? (\n                  <div className=\"pt-1 text-red-700\" id=\"password-error\">\n                    {actionData.errors.password}\n                  </div>\n                ) : null}\n              </div>\n            </div>\n\n            <input type=\"hidden\" name=\"redirectTo\" value={redirectTo} />\n            <button\n              type=\"submit\"\n              className=\"w-full rounded bg-blue-500 px-4 py-2 text-white hover:bg-blue-600 focus:bg-blue-400\"\n            >\n              Log in\n            </button>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center\">\n                <input\n                  id=\"remember\"\n                  name=\"remember\"\n                  type=\"checkbox\"\n                  className=\"h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500\"\n                />\n                <label\n                  htmlFor=\"remember\"\n                  className=\"ml-2 block text-sm text-gray-900\"\n                >\n                  Remember me\n                </label>\n              </div>\n              <div className=\"text-center text-sm text-gray-500\">\n                Don't have an account?{\" \"}\n                <Link\n                  className=\"text-blue-500 underline\"\n                  to={{\n                    pathname: \"/register\",\n                    search: searchParams.toString(),\n                  }}\n                >\n                  Sign up\n                </Link>\n              </div>\n            </div>\n          </Form>\n        </div>\n      </div>\n    </>\n  );\n}\n"],
  "mappings": "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",
  "names": ["import_react", "_a", "_b", "_c", "_d"]
}
