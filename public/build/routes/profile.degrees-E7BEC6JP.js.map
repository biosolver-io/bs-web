{
  "version": 3,
  "sources": ["../../../app/routes/profile.degrees.tsx"],
  "sourcesContent": ["\r\nimport { ActionArgs, LoaderArgs, json, redirect } from \"@remix-run/node\";\r\nimport { useActionData, useFetcher, useLoaderData, useSearchParams } from \"@remix-run/react\"\r\nimport { useEffect, useState } from \"react\";\r\nimport assessmentFormats from \"~/assets/data/assessmentFormats\";\r\nimport countries from \"~/assets/data/countries\";\r\nimport months from \"~/assets/data/months\";\r\nimport years from \"~/assets/data/years\";\r\nimport yesNos from \"~/assets/data/yesNos\";\r\nimport AccomplishmentCard from \"~/components/AccomplishmentCard\";\r\nimport AccomplishmentForm from \"~/components/AccomplishmentForm\";\r\nimport DegreeCard from \"~/components/DegreeCard\";\r\nimport LabelledDropdown from \"~/components/LabelledDropdown\"\r\nimport LabelledTextInput from \"~/components/LabelledInput\"\r\nimport { prisma } from \"~/db.server\";\r\nimport { requireUserId } from \"~/session.server\";\r\nimport { Accomplishment } from \"~/types.client\";\r\n\r\nexport const action = async ({ request }: ActionArgs) => {\r\n  const body = await request.formData();\r\n  const actionType = body.get('action')\r\n  if (actionType === 'addDegree') {\r\n    const newDegree = await prisma.degree.create({\r\n      data: {\r\n        level: '',\r\n        major: '',\r\n        school: '',\r\n        userId: await requireUserId(request),\r\n        isTemp: true\r\n      }\r\n    })\r\n    return json({\r\n      newDegree\r\n    })\r\n  } else if (actionType === 'saveDegree') {\r\n    const dataToUpdate = {\r\n      level: body.get('type') as string,\r\n      major: body.get('major') as string,\r\n      school: body.get('school') as string,\r\n      country: body.get('country') as string,\r\n      stateOrCity: body.get('cityOrState') as string,\r\n      startYear: parseInt(body.get('startYear') as string),\r\n      startMonth: parseInt(body.get('startMonth') as string),\r\n      endYear: parseInt(body.get('endYear') as string),\r\n      endMonth: parseInt(body.get('endMonth') as string),\r\n      assessmentFormat: body.get('assessmentFormat') as string,\r\n      grade: body.get('grade') as string,\r\n      hasEca: body.get('hasEca') as string === 'Yes' ? true : false,\r\n      ecaAuthority: body.get('ecaAuthority') as string,\r\n      isTemp: false\r\n    }\r\n    console.log(dataToUpdate)\r\n    await prisma.degree.update({\r\n      where: {\r\n        id: body.get('degreeId') as string\r\n      },\r\n      data: dataToUpdate\r\n    })\r\n    return redirect('/profile/degrees')\r\n  } else {\r\n    throw new Error('Invalid action type')\r\n  }\r\n}\r\n\r\nexport const loader = async ({ request }: LoaderArgs) => {\r\n  const userId = await requireUserId(request)\r\n  const degrees = await prisma.degree.findMany({\r\n    include: {\r\n      accomplishments: true\r\n    },\r\n    where: {\r\n      userId,\r\n      isTemp: false\r\n    }\r\n  })\r\n  return json({\r\n    degrees\r\n  });\r\n}\r\n\r\nexport default function EducationDegrees() {\r\n  const fetcher = useFetcher()\r\n  const { degrees } = useLoaderData<typeof loader>()\r\n  const [searchParams] = useSearchParams()\r\n  const [isAddingAccomplishment, setIsAddingAccomplishment] = useState(false)\r\n  const [isAddingDegree, setIsAddingDegree] = useState(false)\r\n  const [degreeBeingAdded, setDegreeBeingAdded] = useState(null)\r\n  const [accomplishmentsForDegreeBeingAdded, setAccomplishmentsForDegreeBeingAdded] = useState<Accomplishment[]>([])\r\n\r\n  console.log(fetcher.data)\r\n\r\n  useEffect(() => {\r\n    if (searchParams.get('addAccomplishment')) {\r\n      setIsAddingAccomplishment(true)\r\n    }\r\n  }, [searchParams])\r\n  useEffect(() => {\r\n    setIsAddingDegree(fetcher.data?.newDegree?.id ? true : false)\r\n    setDegreeBeingAdded(fetcher.data?.newDegree?.id)\r\n  }, [fetcher.data])\r\n\r\n  return (\r\n    <section>\r\n      {\r\n        degrees.map(degree => <DegreeCard key={degree.id} degree={degree} />)\r\n      }\r\n      {\r\n        isAddingDegree && <fetcher.Form action=\"/profile/degrees\" method=\"post\" className=\"p-5\">\r\n          <input name=\"degreeId\" type=\"hidden\" value={fetcher.data?.newDegree.id} />\r\n          <LabelledDropdown\r\n            name=\"type\"\r\n            label=\"Degree\"\r\n            options={[\r\n              { value: \"UG Diploma\", label: \"UG Diploma\", name: \"UG Diploma\" },\r\n              { value: \"Bachelors\", label: \"Bachelors\", name: \"Bachelors\" },\r\n              { value: \"PG Diploma\", label: \"PG Diploma\", name: \"PG Diploma\" },\r\n              { value: \"Professional Degree\", label: \"Professional Degree\", name: \"Professional Degree\" },\r\n              { value: \"Masters\", label: \"Masters\", name: \"Masters\" },\r\n              { value: \"PhD or Doctoral Studies\", label: \"PhD or Doctoral Studies\", name: \"PhD or Doctoral Studies\" },\r\n            ]}\r\n            className=\"w-full\"\r\n          />\r\n          <LabelledTextInput\r\n            name=\"school\"\r\n            label=\"University/College\"\r\n            placeholder=\"Enter the name of your university/college\"\r\n            className=\"w-full mt-5\"\r\n          />\r\n          <LabelledTextInput\r\n            name=\"major\"\r\n            label=\"Subject/Major\"\r\n            placeholder=\"Enter your field of study\"\r\n            className=\"w-full mt-5\"\r\n          />\r\n          <LabelledDropdown\r\n            name=\"country\"\r\n            label=\"Country\"\r\n            options={countries.map(country => ({ value: country.code, label: country.name, name: country.name }))}\r\n            className=\"w-full mt-5\"\r\n            placeholder=\"Select Country\"\r\n          />\r\n          <LabelledTextInput\r\n            name=\"cityOrState\"\r\n            label=\"City/State\"\r\n            placeholder=\"Enter the city/state of your university/college\"\r\n            className=\"w-full mt-5\"\r\n          />\r\n          <div className=\"flex flex-wrap mt-5 gap-5\">\r\n            <label className=\"w-full mb-2 font-bold text-md text-gray-700\">\r\n              Started\r\n            </label>\r\n            <LabelledDropdown\r\n              name=\"startYear\"\r\n              placeholder=\"Year\"\r\n              className=\"w-full md:w-1/2\"\r\n              options={\r\n                years.map(year => ({ value: year.toString(), label: year.toString(), name: year.toString() }))\r\n              }\r\n            />\r\n            <LabelledDropdown\r\n              name=\"startMonth\"\r\n              placeholder=\"Month\"\r\n              className=\"w-full md:w-1/2\"\r\n              options={\r\n                months.map(month => ({ value: month.id, label: month.name, name: month.name }))\r\n              }\r\n            />\r\n          </div>\r\n          <div className=\"flex flex-wrap mt-5 gap-5\">\r\n            <label className=\"w-full mb-2 font-bold text-md text-gray-700\">\r\n              Ended\r\n            </label>\r\n            <LabelledDropdown\r\n              name=\"endYear\"\r\n              placeholder=\"Year\"\r\n              className=\"w-full md:w-1/2\"\r\n              options={\r\n                Array.from({ length: 50 }, (_, i) => i + 1970).map(year => ({ value: year.toString(), label: year.toString(), name: year.toString() }))\r\n              }\r\n            />\r\n            <LabelledDropdown\r\n              name=\"endMonth\"\r\n              placeholder=\"Month\"\r\n              className=\"w-full md:w-1/2\"\r\n              options={\r\n                months.map(month => ({ value: month.id, label: month.name, name: month.name }))\r\n              }\r\n            />\r\n          </div>\r\n          <LabelledDropdown\r\n            name=\"assessmentFormat\"\r\n            label=\"Assessment Format\"\r\n            placeholder=\"Choose the format of your assessment\"\r\n            className=\"w-full mt-5\"\r\n            options={\r\n              assessmentFormats.map(format => ({ value: format, label: format, name: format }))\r\n            }\r\n          />\r\n          <LabelledTextInput\r\n            name=\"grade\"\r\n            label=\"Marks/Grade\"\r\n            placeholder=\"Enter your final marks/grade\"\r\n            className=\"w-full mt-5\"\r\n          />\r\n          <LabelledDropdown\r\n            name=\"hasEca\"\r\n            label=\"Do you have an ECA Certificate?\"\r\n            className=\"w-full mt-5\"\r\n            options={\r\n              yesNos.map(yesNo => ({ value: yesNo, label: yesNo, name: yesNo }))\r\n            }\r\n          />\r\n          <LabelledTextInput\r\n            name=\"ecaAuthority\"\r\n            label=\"ECA Authority\"\r\n            placeholder=\"Enter the name of the authority that issued your ECA certificate\"\r\n            className=\"w-full mt-5\"\r\n          />\r\n          {\r\n            accomplishmentsForDegreeBeingAdded.map(accomplishment => <AccomplishmentCard key={accomplishment.id} accomplishment={accomplishment} />)\r\n          }\r\n          <button type=\"button\" onClick={() => setIsAddingAccomplishment(true)} className=\"mt-5 text-blue-500\">Add Accomplishment</button>\r\n          <input name=\"action\" type=\"hidden\" value=\"saveDegree\" />\r\n          <button type=\"submit\" className=\"flex mt-5 bg-blue-500 text-white px-5 py-2 rounded-md\">Save</button>\r\n        </fetcher.Form>\r\n      }\r\n      {\r\n        <fetcher.Form action=\"/profile/degrees\" method=\"post\">\r\n          <input name=\"action\" type=\"hidden\" value=\"addDegree\" />\r\n          <button type=\"submit\" className=\"flex mt-5 bg-blue-500 text-white px-5 py-2 rounded-md\" disabled={isAddingDegree}>Add Degree</button>\r\n        </fetcher.Form>\r\n      }\r\n      {\r\n        degreeBeingAdded && <AccomplishmentForm action={`/profile/degrees/${degreeBeingAdded}`} open={isAddingAccomplishment} setOpen={setIsAddingAccomplishment} onSubmit={(accomplishments) => {\r\n          setAccomplishmentsForDegreeBeingAdded(accomplishments)\r\n        }} />\r\n      }\r\n    </section>\r\n  )\r\n}"],
  "mappings": "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",
  "names": ["import_react", "_a"]
}
